import heapq

# Define the graph as a dictionary
romania_map = {
    'A': {'S': 7},
    'S': {'A': 7, 'B': 2, 'C': 3},
    'C': {'S': 3},
    'B': {'S': 2, 'D': 4,'H': 1},
    'D': {'B': 4},
    'H': {'B': 1, 'F': 3,'G': 2},
    'F': {'H': 3},
    'G': {'H': 2, 'E': 2},
    'E': {'G': 2},
    
}

# Heuristic estimates (straight-line distance to Bucharest)
heuristics = {
   'A': 9 ,'S': 10 ,'C': 8 ,'B':7 ,'D':8 ,'H':6 ,'F':6 ,'G':3 ,'E':0
}

def a_star_search(graph, start, goal):
    # Priority queue for the open list (places to explore)
    open_list = []
    heapq.heappush(open_list, (0, start))  # (priority, node)
    
    # Dictionary to store the shortest known distance to each place
    g_costs = {start: 0}
    
    # Dictionary to store the paths
    came_from = {start: None}
    
    while open_list:
        _, current_place = heapq.heappop(open_list)
        
        if current_place == goal:
            # Goal reached, reconstruct the path
            path = []
            while current_place:
                path.append(current_place)
                current_place = came_from[current_place]
            return path[::-1], g_costs[goal]  # Return the path and its total cost
        
        # Explore the neighbors of the current place
        for neighbor, distance in graph[current_place].items():
            tentative_g_cost = g_costs[current_place] + distance
            
            if neighbor not in g_costs or tentative_g_cost < g_costs[neighbor]:
                g_costs[neighbor] = tentative_g_cost
                priority = tentative_g_cost + heuristics[neighbor]
                heapq.heappush(open_list, (priority, neighbor))
                came_from[neighbor] = current_place
    
    return None, float('inf')  # If no path is found

# Example usage
start = 'F'
goal = 'A'
path, cost = a_star_search(romania_map, start, goal)
print(f"Shortest path from {start} to {goal}: {path}")
print(f"Total distance: {cost}")
