import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

np.random.seed(42)

annual_income = np.random.uniform(30, 150, 200)

spending_score = np.random.uniform(1, 100, 200)

data = pd.DataFrame({
    'Annual Income (k$)': annual_income,
    'Spending Score (1-100)': spending_score
})

data.head()

scaler = StandardScaler()
data_scaled = scaler.fit_transform(data)

data_scaled[:5]

inertia = [] 

for k in range(1, 11):  
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(data_scaled)
    inertia.append(kmeans.inertia_)

plt.plot(range(1, 11), inertia, marker='o')
plt.title('Elbow Method For Optimal K')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.show()

kmeans = KMeans(n_clusters=4, n_init=10, random_state=42)
kmeans.fit(data_scaled)

data['Cluster'] = kmeans.labels_

data.head()

plt.figure(figsize=(8, 6))
plt.scatter(data['Annual Income (k$)'], data['Spending Score (1-100)'], c=data['Cluster'], cmap='viridis')
plt.title('Customer Segments')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.colorbar(label='Cluster')
plt.show()

cluster_centers = kmeans.cluster_centers_

cluster_centers = scaler.inverse_transform(cluster_centers)

print(cluster_centers)
